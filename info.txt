Python Django Tutorial: Full-Featured Web App

Video course of Corey Shafer: https://www.youtube.com/watch?v=UmljXZIypDc

Commands:
pipenv install django
python -m django --version
django-admin startproject django_project .
./manage.py runserver
./manage.py startapp blog
edit blog/views.py
    HttpResponse
    Render
    fake data dict posts
    context
    add base.html/partials etc

admin panel
    $ ./manage.py makemigrations
    $ ./manage.py migrate
    $ ./manage.py createsuperuser

db, models
    create Post model
    работа со сременем
        from django.utils import timezone
        date_posted = models.DateTimeField(default=timezone.now)
    user
    from django.cintrib.auth.models import User
    author = models.ForeignKey(User, on_delete=models.CASCADE)

    $ ./manage.py shell
        >>> from django.db import models
        >>> from django.contrib.auth.models import User
        >>> User.objects.all()
            <QuerySet [<User: admin>]>

        >>> from blog.models import Post
            >>> Post.objects.all()
                <QuerySet []>

            >>> user = User.objects.filter(username='developer19').first()
            >>> post = Post(content='Another post content!', author_id=user.id, title='Title new post')
            >>> post
            <Post: Title new post>
            >>> post.save()
            >>> Post.objects.all()
                DITED>, <Post: Title new post>]>
            >>> Post.objects.filter(title__icontains='new')
                <QuerySet [<Post: Title new post>]>
            >>> user.post_set
                <django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x7fde3ce65af0>
            >>> user.post_set.all()
                <QuerySet [<Post: Title new post>]>

                # Не нужно указывать пользователя и писать save()
                >>> user.post_set.create(title='Post title post_set', content='some content')
                    <Post: Post title post_set>

                # Выдает посты только этого пользовтаеля
                >>> user.post_set.all()
                    <QuerySet [<Post: Title new post>, <Post: Post title post_set>]>

    Работа с моделями во виюхе
        from .models import Post
       ...
       posts = Post.objects.all()
        context = {
            'posts': posts,
        }
        return render(request, 'blog/home.html', context)

    Дата на русском
        # settings.py
        LANGUAGE_CODE = 'ru-RU'
        TIME_ZONE = 'UTC'
        USE_I18N = True
        USE_L10N = False
        USE_TZ = True
        DATE_FORMAT = 'd E Y'
        # в шаблоне
        {{ post.date_posted | date:"j E Y" }}

Create user registration page, login\logout
    # create new app users
    $ ./manage.py startapp users
    # create register func in users/views
        from django.contrib.auth.forms import UserCreationForm
        def register(request):
            form = UserCreationForm()
            return render(request, 'users/register.html', {'form': form})
    # create form in template users/register.html
    # create url to register
    # add messages
        edit base.html
    Now registration shoul work!!!
    # to add email field to our form we inherit new form UserRegisterForm from UserCreationForm
        create forms.py
    # to make better form we gonna use Crispy forms
         $ pip install django-crispy-forms
         add to settings.py
            crispy_forms
            CRISPY_TEMPLATE_PACK = 'bootstrap4'
            add to users/register.html
                {% load crispy_forms_tags %}
                {{ form | crispy }}

# Create athentication system login/logout
    default login/logout view
    template_name as arg in urls.py
    login.html/logout.html
    settings.py
        LOGIN_REDIRECT_URL = 'blog-home'
    to demonstrate restricted access to some pages cteate profile.html wich access only registered users
        users/views.py/
            from django.contrib.auth.decorators import login_required
            @login_required
            def profile(request):
                ....
        когда доступ не автори зован редирект на логин
            LOGIN_URL = 'login'

# Create user profile with picture. Django Signals
    Create Profile model with ImageField, extends User model
    to get access to the image -> user.profile.image.url
    To work with images
        edit settings.py
            MEDIA_ROOT
            MEDIA_URL
        edit root urls.py
            from django.conf import settings
            from django.conf.urls.static import static
            if settings.DEBUG:
                urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

# Use signals to create Profile for user when he registers
    create users/signals.py
    edit users/apps.py
    !!! Важно !!! чтобы сигалы работали нужно в INSTALLED_APPS прописывать приложение полностью:
        'users.apps.UsersConfig',
Update Profile
    What will we do:
        resize images + create form to update profile
    Update users/forms
        class UserUpdateForm(forms.ModelForm)
        class ProfileUpdateForm(forms.ModelForm)
    Update users/views.py
        edit def profile

    Update users/register.html
        {{ u_form | crispy }}
        {{ p_form | crispy }}не будет работать
        <form method="POST" enctype="multipart/form-data">  !!! Иначе
    To resize image
        change save method Profile model

    Add small image of author by each post
        {{ post.author.profile.image.url }}

Create, Update, and Delete Posts / Class Based Views CBV
    exchange function based view to CBV
        class PostListView(ListView):
        model = Post
        template_name = 'blog/home.html'
        context_object_name = 'posts'
    Create PostDetailView
    Create POstCreateView
        add def get_absolute_url to Post model
    Restrict access to new views to prevent create new pos by unathorised user
        from django.contrib.auth.mixins import LoginRequiredMixin
        add LoginRequiredMixin to class
            class PostCreateView(LoginRequiredMixin, CreateView):
